'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.PronounType = exports.ProGenerateText = exports.ProOb = undefined;

var _Gender = require('./Gender');

var _Gender2 = _interopRequireDefault(_Gender);

var _Person = require('./Person');

var _Person2 = _interopRequireDefault(_Person);

var _Noun = require('./Noun');

var _SchemaConstants = require('./SchemaConstants');

var _SchemaConstants2 = _interopRequireDefault(_SchemaConstants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ProOb(props) {
	this.t = _SchemaConstants2.default.Pro.t;
	this.v = _SchemaConstants2.default.Pro.cv;
	this.type = props.type || PronounType.Subject;
	this.person = props.person || _Person2.default.NoneSelected;
	this.plurality = props.plurality || _Noun.Plurality.NoneSelected;
	this.gender = props.gender || _Gender2.default.NoneSelected;
}

var PronounType = {
	'Subject': 0,
	'Object': 1,
	'Possessive': 2,
	'ReflexiveIntensive': 3
};

var PronounTable = [[['I', 'we'], ['you', 'you'], [['he', 'she', 'it'], 'they']], // subject
[['me', 'us'], ['you', 'you'], [['him', 'her', 'it'], 'them']], // object
[['mine', 'ours'], ['yours', 'yours'], [['his', 'hers'], 'theirs']], // possessive pronoun
[['myself', 'ourselves'], ['yourself', 'yourselves'], [['himself', 'herself', 'itself'], 'themselves']]];

var ProGenerateText = function ProGenerateText(pronoun) {

	var retVal = null; // If a good configuration cannot be found, then return null to signal bad configuration.

	var type = pronoun.type,
	    person = pronoun.person,
	    plurality = pronoun.plurality,
	    gender = pronoun.gender;

	// Convert constant values to indices for use here.

	var type_idx = void 0;
	switch (type) {
		case PronounType.Subject:
			type_idx = 0;
			break;
		case PronounType.Object:
			type_idx = 1;
			break;
		case PronounType.Possessive:
			type_idx = 2;
			break;
		case PronounType.ReflexiveIntensive:
			type_idx = 3;
			break;
		default:
			return retVal; // If no pronoun type then this is not a good configuration
	}

	var person_idx = void 0;
	switch (person) {
		case _Person2.default.First:
			person_idx = 0;
			break;
		case _Person2.default.Second:
			person_idx = 1;
			break;
		case _Person2.default.Third:
			person_idx = 2;
			break;
		default:
			return retVal; // If no person then this is not a good configuration
	}

	var plurality_idx = void 0;
	switch (plurality) {
		case _Noun.Plurality.Singular:
			plurality_idx = 0;
			break;
		case _Noun.Plurality.Plural:
			plurality_idx = 1;
			break;
		default:
			return retVal; // If no plurality then this is not a good configuration
	}

	retVal = PronounTable[type_idx][person_idx][plurality_idx];

	if (person === _Person2.default.Third && plurality === _Noun.Plurality.Singular) if (gender === _Gender2.default.Male) {
		retVal = retVal[0];
	} else if (gender === _Gender2.default.Female) {
		retVal = retVal[1];
	} else {
		retVal = retVal[2];
	}

	return retVal;
};

exports.ProOb = ProOb;
exports.ProGenerateText = ProGenerateText;
exports.PronounType = PronounType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Qcm9ub3VuLmpzIl0sIm5hbWVzIjpbIlByb09iIiwicHJvcHMiLCJ0IiwiUHJvIiwidiIsImN2IiwidHlwZSIsIlByb25vdW5UeXBlIiwiU3ViamVjdCIsInBlcnNvbiIsIk5vbmVTZWxlY3RlZCIsInBsdXJhbGl0eSIsImdlbmRlciIsIlByb25vdW5UYWJsZSIsIlByb0dlbmVyYXRlVGV4dCIsInByb25vdW4iLCJyZXRWYWwiLCJ0eXBlX2lkeCIsIk9iamVjdCIsIlBvc3Nlc3NpdmUiLCJSZWZsZXhpdmVJbnRlbnNpdmUiLCJwZXJzb25faWR4IiwiRmlyc3QiLCJTZWNvbmQiLCJUaGlyZCIsInBsdXJhbGl0eV9pZHgiLCJTaW5ndWxhciIsIlBsdXJhbCIsIk1hbGUiLCJGZW1hbGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBLFNBQVNBLEtBQVQsQ0FBZUMsS0FBZixFQUFzQjtBQUNyQixNQUFLQyxDQUFMLEdBQVMsMEJBQU9DLEdBQVAsQ0FBV0QsQ0FBcEI7QUFDQSxNQUFLRSxDQUFMLEdBQVMsMEJBQU9ELEdBQVAsQ0FBV0UsRUFBcEI7QUFDQSxNQUFLQyxJQUFMLEdBQWFMLE1BQU1LLElBQU4sSUFBY0MsWUFBWUMsT0FBdkM7QUFDQSxNQUFLQyxNQUFMLEdBQWNSLE1BQU1RLE1BQU4sSUFBZ0IsaUJBQU9DLFlBQXJDO0FBQ0EsTUFBS0MsU0FBTCxHQUFpQlYsTUFBTVUsU0FBTixJQUFtQixnQkFBVUQsWUFBOUM7QUFDQSxNQUFLRSxNQUFMLEdBQWNYLE1BQU1XLE1BQU4sSUFBZ0IsaUJBQU9GLFlBQXJDO0FBQ0E7O0FBRUQsSUFBTUgsY0FBYztBQUNuQixZQUFzQixDQURIO0FBRW5CLFdBQXNCLENBRkg7QUFHbkIsZUFBc0IsQ0FISDtBQUluQix1QkFBc0I7QUFKSCxDQUFwQjs7QUFPQSxJQUFNTSxlQUFlLENBQ3BCLENBQUMsQ0FBQyxHQUFELEVBQVUsSUFBVixDQUFELEVBQXdC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dXJjZXNDb250ZW50IjpbImltcG9ydCBHZW5kZXIgICAgICBmcm9tICcuL0dlbmRlcidcbmltcG9ydCBQZXJzb24gICAgICBmcm9tICcuL1BlcnNvbidcbmltcG9ydCB7UGx1cmFsaXR5fSBmcm9tICcuL05vdW4nXG5pbXBvcnQgU2NoZW1hICAgICAgZnJvbSAnLi9TY2hlbWFDb25zdGFudHMnXG5cbmZ1bmN0aW9uIFByb09iKHByb3BzKSB7XG5cdHRoaXMudCA9IFNjaGVtYS5Qcm8udFxuXHR0aGlzLnYgPSBTY2hlbWEuUHJvLmN2XG5cdHRoaXMudHlwZSAgPSBwcm9wcy50eXBlIHx8IFByb25vdW5UeXBlLlN1YmplY3Rcblx0dGhpcy5wZXJzb24gPSBwcm9wcy5wZXJzb24gfHwgUGVyc29uLk5vbmVTZWxlY3RlZFxuXHR0aGlzLnBsdXJhbGl0eSA9IHByb3BzLnBsdXJhbGl0eSB8fCBQbHVyYWxpdHkuTm9uZVNlbGVjdGVkXG5cdHRoaXMuZ2VuZGVyID0gcHJvcHMuZ2VuZGVyIHx8IEdlbmRlci5Ob25lU2VsZWN0ZWRcbn1cblxuY29uc3QgUHJvbm91blR5cGUgPSB7XG5cdCdTdWJqZWN0JzogICAgICAgICAgICAwLFxuXHQnT2JqZWN0JzogICAgICAgICAgICAgMSxcblx0J1Bvc3Nlc3NpdmUnOiAgICAgICAgIDIsXG5cdCdSZWZsZXhpdmVJbnRlbnNpdmUnOiAzXG59XG5cbmNvbnN0IFByb25vdW5UYWJsZSA9IFtcblx0W1snSScsICAgICAnd2UnXSwgICAgICAgWyd5b3UnLCAgICAgJ3lvdSddLCAgICAgICBbWydoZScsICAgICAnc2hlJywnaXQnXSwgICAgICAgICAgJ3RoZXknXV0sICAgICAgIC8vIHN1YmplY3Rcblx0W1snbWUnLCAgICAndXMnXSwgICAgICAgWyd5b3UnLCAgICAgJ3lvdSddLCAgICAgICBbWydoaW0nLCAgICAnaGVyJywnaXQnXSwgICAgICAgICAgJ3RoZW0nXV0sICAgICAgIC8vIG9iamVjdFxuXHRbWydtaW5lJywgICdvdXJzJ10sICAgICBbJ3lvdXJzJywgICAneW91cnMnXSwgICAgIFtbJ2hpcycsICAgICdoZXJzJ10sICAgICAgICAgICAgICAndGhlaXJzJ11dLCAgICAgLy8gcG9zc2Vzc2l2ZSBwcm9ub3VuXG5cdFtbJ215c2VsZicsJ291cnNlbHZlcyddLFsneW91cnNlbGYnLCd5b3Vyc2VsdmVzJ10sW1snaGltc2VsZicsJ2hlcnNlbGYnLCAgJ2l0c2VsZiddLCd0aGVtc2VsdmVzJ11dLCAvLyBzdWJqZWN0XG5dXG5cbmNvbnN0IFByb0dlbmVyYXRlVGV4dCA9IChwcm9ub3VuKSA9PiB7XG5cblx0bGV0IHJldFZhbCA9IG51bGwgLy8gSWYgYSBnb29kIGNvbmZpZ3VyYXRpb24gY2Fubm90IGJlIGZvdW5kLCB0aGVuIHJldHVybiBudWxsIHRvIHNpZ25hbCBiYWQgY29uZmlndXJhdGlvbi5cblxuXHRjb25zdCB7dHlwZSwgcGVyc29uLCBwbHVyYWxpdHksIGdlbmRlcn0gPSBwcm9ub3VuXG5cblx0Ly8gQ29udmVydCBjb25zdGFudCB2YWx1ZXMgdG8gaW5kaWNlcyBmb3IgdXNlIGhlcmUuXG5cdGxldCB0eXBlX2lkeFxuXHRzd2l0Y2godHlwZSkge1xuXHRcdGNhc2UgUHJvbm91blR5cGUuU3ViamVjdDpcblx0XHRcdHR5cGVfaWR4ID0gMFxuXHRcdFx0YnJlYWtcblx0XHRjYXNlIFByb25vdW5UeXBlLk9iamVjdDpcblx0XHRcdHR5cGVfaWR4ID0gMVxuXHRcdFx0YnJlYWtcblx0XHRjYXNlIFByb25vdW5UeXBlLlBvc3Nlc3NpdmU6XG5cdFx0XHR0eXBlX2lkeCA9IDJcblx0XHRcdGJyZWFrXG5cdFx0Y2FzZSBQcm9ub3VuVHlwZS5SZWZsZXhpdmVJbnRlbnNpdmU6XG5cdFx0XHR0eXBlX2lkeCA9IDNcblx0XHRcdGJyZWFrXG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiByZXRWYWwgLy8gSWYgbm8gcHJvbm91biB0eXBlIHRoZW4gdGhpcyBpcyBub3QgYSBnb29kIGNvbmZpZ3VyYXRpb25cblx0fVxuXG5cdGxldCBwZXJzb25faWR4XG5cdHN3aXRjaChwZXJzb24pIHtcblx0XHRjYXNlIFBlcnNvbi5GaXJzdDpcblx0XHRcdHBlcnNvbl9pZHggPSAwXG5cdFx0XHRicmVha1xuXHRcdGNhc2UgUGVyc29uLlNlY29uZDpcblx0XHRcdHBlcnNvbl9pZHggPSAxXG5cdFx0XHRicmVha1xuXHRcdGNhc2UgUGVyc29uLlRoaXJkOlxuXHRcdFx0cGVyc29uX2lkeCA9IDJcblx0XHRcdGJyZWFrXG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiByZXRWYWwgLy8gSWYgbm8gcGVyc29uIHRoZW4gdGhpcyBpcyBub3QgYSBnb29kIGNvbmZpZ3VyYXRpb25cblx0fVxuXG5cdGxldCBwbHVyYWxpdHlfaWR4XG5cdHN3aXRjaChwbHVyYWxpdHkpIHtcblx0XHRjYXNlIFBsdXJhbGl0eS5TaW5ndWxhcjpcblx0XHRcdHBsdXJhbGl0eV9pZHggPSAwXG5cdFx0XHRicmVha1xuXHRcdGNhc2UgUGx1cmFsaXR5LlBsdXJhbDpcblx0XHRcdHBsdXJhbGl0eV9pZHggPSAxXG5cdFx0XHRicmVha1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gcmV0VmFsIC8vIElmIG5vIHBsdXJhbGl0eSB0aGVuIHRoaXMgaXMgbm90IGEgZ29vZCBjb25maWd1cmF0aW9uXG5cdH1cblxuXHRyZXRWYWwgPSBQcm9ub3VuVGFibGVbdHlwZV9pZHhdW3BlcnNvbl9pZHhdW3BsdXJhbGl0eV9pZHhdXG5cblx0aWYocGVyc29uID09PSBQZXJzb24uVGhpcmQgJiYgcGx1cmFsaXR5ID09PSBQbHVyYWxpdHkuU2luZ3VsYXIpXG5cdFx0aWYoZ2VuZGVyID09PSBHZW5kZXIuTWFsZSkge1xuXHRcdFx0cmV0VmFsID0gcmV0VmFsWzBdXG5cdFx0fSBlbHNlIGlmKGdlbmRlciA9PT0gR2VuZGVyLkZlbWFsZSkge1xuXHRcdFx0cmV0VmFsID0gcmV0VmFsWzFdXG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldFZhbCA9IHJldFZhbFsyXVxuXHR9XG5cblx0cmV0dXJuIHJldFZhbFxuXG59XG5cbmV4cG9ydCB7UHJvT2J9XG5leHBvcnQge1Byb0dlbmVyYXRlVGV4dH1cbmV4cG9ydCB7UHJvbm91blR5cGV9XG4iXX0=