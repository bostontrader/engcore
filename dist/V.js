'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.VGenerateText = exports.VErrors = exports.VOb = exports.Tense = undefined;

var _Person = require('./Person');

var _Person2 = _interopRequireDefault(_Person);

var _SchemaConstants = require('./SchemaConstants');

var _SchemaConstants2 = _interopRequireDefault(_SchemaConstants);

var _VDict = require('./VDict');

var _VDict2 = _interopRequireDefault(_VDict);

var _Plurality = require('./pos/Plurality');

var _Plurality2 = _interopRequireDefault(_Plurality);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function VOb(props) {
	this.t = _SchemaConstants2.default.V.t;
	this.v = _SchemaConstants2.default.V.cv;

	if ('base' in props && props.base in _VDict2.default) {
		var n = _VDict2.default[props.base];
		this.inf = n.inf;
	} else {
		this.inf = props.inf || [];
	}
	this.continuous = props.continuous || false;
	this.passive = props.passive || false;
	this.perfect = props.perfect || false;
	this.person = props.person || _Person2.default.NoneSelected;
	this.plurality = props.plurality || _Plurality2.default.NoneSelected;
	this.tense = props.tense || Tense.Present;
}

var VErrors = {
	'REQUESTED_INFLECTION_UNDEFINED': 'The requested inflection is undefined for this noun.'
};

var Tense = {
	'NoneSelected': 0,
	'Past': 100,
	'Present': 200
};

var VGenerateText = function VGenerateText(vob) {

	var retVal = void 0;

	var key_1 = void 0;
	var key_2 = void 0;

	if (vob.perfect || vob.passive) {
		// p77 past participle used if perfect or passive
		key_1 = 4; // past participle
	} else if (vob.tense === Tense.Present) {
		key_1 = 1;
		key_2 = vob.person === _Person2.default.Third && vob.plurality === _Plurality2.default.Singular ? 0 : 1;
	}

	try {
		retVal = vob.inf[key_1][key_2];
	} catch (e) {
		retVal = { e: VErrors.REQUESTED_INFLECTION_UNDEFINED };
	}
	return retVal;
};

exports.Tense = Tense;
exports.VOb = VOb;
exports.VErrors = VErrors;
exports.VGenerateText = VGenerateText;

/*

 In order to access the value of a particular inflection, we must 

 preterite = 0
 present tense = 1

 plain form = 2 imperative, subjunctal, infinitival
 gerund participle aka present participle = 3
 past participle = 4

 3rd sg = 0
 plain = 1
 */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9WLmpzIl0sIm5hbWVzIjpbIlZPYiIsInByb3BzIiwidCIsIlYiLCJ2IiwiY3YiLCJiYXNlIiwibiIsImluZiIsImNvbnRpbnVvdXMiLCJwYXNzaXZlIiwicGVyZmVjdCIsInBlcnNvbiIsIk5vbmVTZWxlY3RlZCIsInBsdXJhbGl0eSIsInRlbnNlIiwiVGVuc2UiLCJQcmVzZW50IiwiVkVycm9ycyIsIlZHZW5lcmF0ZVRleHQiLCJ2b2IiLCJyZXRWYWwiLCJrZXlfMSIsImtleV8yIiwiVGhpcmQiLCJTaW5ndWxhciIsImUiLCJSRVFVRVNURURfSU5GTEVDVElPTl9VTkRFRklORUQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUEsU0FBU0EsR0FBVCxDQUFhQyxLQUFiLEVBQW9CO0FBQ25CLE1BQUtDLENBQUwsR0FBUywwQkFBT0MsQ0FBUCxDQUFTRCxDQUFsQjtBQUNBLE1BQUtFLENBQUwsR0FBUywwQkFBT0QsQ0FBUCxDQUFTRSxFQUFsQjs7QUFFQSxLQUFJLFVBQVVKLEtBQVYsSUFBbUJBLE1BQU1LLElBQU4sbUJBQXZCLEVBQThDO0FBQzdDLE1BQU1DLElBQUksZ0JBQVFOLE1BQU1LLElBQWQsQ0FBVjtBQUNBLE9BQUtFLEdBQUwsR0FBY0QsRUFBRUMsR0FBaEI7QUFDQSxFQUhELE1BR087QUFDTixPQUFLQSxHQUFMLEdBQWNQLE1BQU1PLEdBQU4sSUFBYSxFQUEzQjtBQUNBO0FBQ0QsTUFBS0MsVUFBTCxHQUFrQlIsTUFBTVEsVUFBTixJQUFvQixLQUF0QztBQUNBLE1BQUtDLE9BQUwsR0FBa0JULE1BQU1TLE9BQU4sSUFBaUIsS0FBbkM7QUFDQSxNQUFLQyxPQUFMLEdBQWtCVixNQUFNVSxPQUFOLElBQWlCLEtBQW5DO0FBQ0EsTUFBS0MsTUFBTCxHQUFrQlgsTUFBTVcsTUFBTixJQUFpQixpQkFBT0MsWUFBMUM7QUFDQSxNQUFLQyxTQUFMLEdBQWtCYixNQUFNYSxTQUFOLElBQW9CLG9CQUFVRCxZQUFoRDtBQUNBLE1BQUtFLEtBQUwsR0FBa0JkLE1BQU1jLEtBQU4sSUFBaUJDLE1BQU1DLE9BQXpDO0FBQ0E7O0FBRUQsSUFBTUMsVUFBVTtBQUNmLG1DQUFpQztBQURsQixDQUFoQjs7QUFJQSxJQUFNRixRQUFRO0FBQ2IsaUJBQWUsQ0FERjtBQUViLFNBQWEsR0FGQTtBQUdiLFlBQWE7QUFIQSxDQUFkOztBQU1BLElBQU1HLGdCQUFnQixTQUFoQkEsYUFBZ0IsQ0FBQ0MsR0FBRCxFQUFTOztBQUU5QixLQUFJQyxlQUFKOztBQUVBLEtBQUlDLGNBQUo7QUFDQSxLQUFJQyxjQUFKOztBQUVBLEtBQUdILElBQUlULE9BQUosSUFBZVMsSUFBSVYsT0FBdEIsRUFBK0I7QUFBRTtBQUNoQ1ksVUFBUSxDQUFSLENBRDhCLENBQ3BCO0FBQ1YsRUFGRCxNQUlLLElBQUdGLElBQUlMLEtBQUosS0FBY0MsTUFBTUMsT0FBdkIsRUFBZ0M7QUFDcENLLFVBQVEsQ0FBUjtBQUNBQyxVQUFTSCxJQUFJUixNQUFKLEtBQWUsaUJBQU9ZLEtBQXRCLElBQStCSixJQUFJTixTQUFKLEtBQWtCLG9CQUFVVyxRQUE1RCxHQUF3RSxDQUF4RSxHQUE0RSxDQUFwRjtBQUNBOztBQUVELEtBQUk7QUFDSEosV0FBU0QsSUFBSVosR0FBSixDQUFRYyxLQUFSLEVBQWVDLEtBQWYsQ0FBVDtBQUNBLEVBRkQsQ0FFRSxPQUFNRyxDQUFOLEVBQVM7QUFDVkwsV0FBUyxFQUFDSyxHQUFFUixRQUFRUyw4QkFBWCxFQUFUO0FBQ0E7QUFDRCxRQUFPTixNQUFQO0FBQ0EsQ0F0QkQ7O1FBd0JRTCxLLEdBQUFBLEs7UUFDQWhCLEcsR0FBQUEsRztRQUNBa0IsTyxHQUFBQSxPO1FBQ0FDLGEsR0FBQUEsYTs7QUFFUiIsImZpbGUiOiJWLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBlcnNvbiAgICBmcm9tICcuL1BlcnNvbidcbmltcG9ydCBTY2hlbWEgICAgZnJvbSAnLi9TY2hlbWFDb25zdGFudHMnXG5pbXBvcnQgVkRpY3RPYiAgIGZyb20gJy4vVkRpY3QnXG5pbXBvcnQgUGx1cmFsaXR5IGZyb20gJy4vcG9zL1BsdXJhbGl0eSdcblxuZnVuY3Rpb24gVk9iKHByb3BzKSB7XG5cdHRoaXMudCA9IFNjaGVtYS5WLnRcblx0dGhpcy52ID0gU2NoZW1hLlYuY3ZcblxuXHRpZiAoJ2Jhc2UnIGluIHByb3BzICYmIHByb3BzLmJhc2UgaW4gVkRpY3RPYikge1xuXHRcdGNvbnN0IG4gPSBWRGljdE9iW3Byb3BzLmJhc2VdXG5cdFx0dGhpcy5pbmYgICAgPSBuLmluZlxuXHR9IGVsc2Uge1xuXHRcdHRoaXMuaW5mICAgID0gcHJvcHMuaW5mIHx8IFtdXG5cdH1cblx0dGhpcy5jb250aW51b3VzID0gcHJvcHMuY29udGludW91cyB8fCBmYWxzZVxuXHR0aGlzLnBhc3NpdmUgICAgPSBwcm9wcy5wYXNzaXZlIHx8IGZhbHNlXG5cdHRoaXMucGVyZmVjdCAgICA9IHByb3BzLnBlcmZlY3QgfHwgZmFsc2Vcblx0dGhpcy5wZXJzb24gICAgID0gcHJvcHMucGVyc29uICB8fCBQZXJzb24uTm9uZVNlbGVjdGVkXG5cdHRoaXMucGx1cmFsaXR5ICA9IHByb3BzLnBsdXJhbGl0eSAgfHwgUGx1cmFsaXR5Lk5vbmVTZWxlY3RlZFxuXHR0aGlzLnRlbnNlICAgICAgPSBwcm9wcy50ZW5zZSAgIHx8IFRlbnNlLlByZXNlbnRcbn1cblxuY29uc3QgVkVycm9ycyA9IHtcblx0J1JFUVVFU1RFRF9JTkZMRUNUSU9OX1VOREVGSU5FRCc6J1RoZSByZXF1ZXN0ZWQgaW5mbGVjdGlvbiBpcyB1bmRlZmluZWQgZm9yIHRoaXMgbm91bi4nXG59XG5cbmNvbnN0IFRlbnNlID0ge1xuXHQnTm9uZVNlbGVjdGVkJzowLFxuXHQnUGFzdCc6ICAgICAgMTAwLFxuXHQnUHJlc2VudCc6ICAgMjAwLFxufVxuXG5jb25zdCBWR2VuZXJhdGVUZXh0ID0gKHZvYikgPT4ge1xuXG5cdGxldCByZXRWYWxcblxuXHRsZXQga2V5XzFcblx0bGV0IGtleV8yXG5cblx0aWYodm9iLnBlcmZlY3QgfHwgdm9iLnBhc3NpdmUpIHsgLy8gcDc3IHBhc3QgcGFydGljaXBsZSB1c2VkIGlmIHBlcmZlY3Qgb3IgcGFzc2l2ZVxuXHRcdGtleV8xID0gNCAvLyBwYXN0IHBhcnRpY2lwbGVcblx0fVxuXG5cdGVsc2UgaWYodm9iLnRlbnNlID09PSBUZW5zZS5QcmVzZW50KSB7XG5cdFx0a2V5XzEgPSAxXG5cdFx0a2V5XzIgPSAodm9iLnBlcnNvbiA9PT0gUGVyc29uLlRoaXJkICYmIHZvYi5wbHVyYWxpdHkgPT09IFBsdXJhbGl0eS5TaW5ndWxhcikgPyAwIDogMVxuXHR9XG5cblx0dHJ5IHtcblx0XHRyZXRWYWwgPSB2b2IuaW5mW2tleV8xXVtrZXlfMl1cblx0fSBjYXRjaChlKSB7XG5cdFx0cmV0VmFsID0ge2U6VkVycm9ycy5SRVFVRVNURURfSU5GTEVDVElPTl9VTkRFRklORUR9XG5cdH1cblx0cmV0dXJuIHJldFZhbFxufVxuXG5leHBvcnQge1RlbnNlfVxuZXhwb3J0IHtWT2J9XG5leHBvcnQge1ZFcnJvcnN9XG5leHBvcnQge1ZHZW5lcmF0ZVRleHR9XG5cbi8qXG5cbiBJbiBvcmRlciB0byBhY2Nlc3MgdGhlIHZhbHVlIG9mIGEgcGFydGljdWxhciBpbmZsZWN0aW9uLCB3ZSBtdXN0IFxuXG4gcHJldGVyaXRlID0gMFxuIHByZXNlbnQgdGVuc2UgPSAxXG5cbiBwbGFpbiBmb3JtID0gMiBpbXBlcmF0aXZlLCBzdWJqdW5jdGFsLCBpbmZpbml0aXZhbFxuIGdlcnVuZCBwYXJ0aWNpcGxlIGFrYSBwcmVzZW50IHBhcnRpY2lwbGUgPSAzXG4gcGFzdCBwYXJ0aWNpcGxlID0gNFxuXG4gM3JkIHNnID0gMFxuIHBsYWluID0gMVxuICovIl19