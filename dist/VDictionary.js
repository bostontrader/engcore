'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _Verb = require('./Verb');

var VDictOb = {
	arrive: new _Verb.VerbOb({ base: 'arrive', pastForm: 'arrived' }),
	be: new _Verb.VerbOb({ base: 'be', pastForm: 'was' }),
	bend: new _Verb.VerbOb({ base: 'bend', pastForm: 'bent' }),
	bite: new _Verb.VerbOb({ base: 'bite', pastForm: 'bit' }),
	bump: new _Verb.VerbOb({ base: 'bump', pastForm: 'bumped' }),
	call: new _Verb.VerbOb({ base: 'call', pastForm: 'called' }),
	come: new _Verb.VerbOb({ base: 'come', pastForm: 'came' }),
	do: new _Verb.VerbOb({ base: 'do', pastForm: 'did' }),
	fall: new _Verb.VerbOb({ base: 'fall', pastForm: 'fell' }),
	fan: new _Verb.VerbOb({ base: 'fan', pastForm: 'fanned' }),
	find: new _Verb.VerbOb({ base: 'find', pastForm: 'found' }),
	fly: new _Verb.VerbOb({ base: 'fly', pastForm: 'flew' }),
	get: new _Verb.VerbOb({ base: 'get', pastForm: 'got' }),
	give: new _Verb.VerbOb({ base: 'give', pastForm: 'gave' }),
	go: new _Verb.VerbOb({ base: 'go', pastForm: 'went' }),
	have: new _Verb.VerbOb({ base: 'have', pastForm: 'had' }),
	hear: new _Verb.VerbOb({ base: 'hear', pastForm: 'heard' }),
	hit: new _Verb.VerbOb({ base: 'hit', pastForm: 'hit' }),
	hold: new _Verb.VerbOb({ base: 'hold', pastForm: 'held' }),
	hop: new _Verb.VerbOb({ base: 'hop', pastForm: 'hopped' }),
	inform: new _Verb.VerbOb({ base: 'inform', pastForm: 'informed' }),
	jump: new _Verb.VerbOb({ base: 'jump', pastForm: 'jumped' }),
	know: new _Verb.VerbOb({ base: 'know', pastForm: 'knew' }),
	leave: new _Verb.VerbOb({ base: 'leave', pastForm: 'left' }),
	let: new _Verb.VerbOb({ base: 'let', pastForm: 'let' }),
	like: new _Verb.VerbOb({ base: 'like', pastForm: 'liked' }),
	lit: new _Verb.VerbOb({ base: 'lit', pastForm: 'lit' }),
	look: new _Verb.VerbOb({ base: 'look', pastForm: 'looked' }),
	make: new _Verb.VerbOb({ base: 'make', pastForm: 'made' }),
	pick: new _Verb.VerbOb({ base: 'pick', pastForm: 'picked' }),
	place: new _Verb.VerbOb({ base: 'place', pastForm: 'placed' }),
	play: new _Verb.VerbOb({ base: 'play', pastForm: 'played' }),
	put: new _Verb.VerbOb({ base: 'put', pastForm: 'put' }),
	run: new _Verb.VerbOb({ base: 'run', pastForm: 'ran' }),
	say: new _Verb.VerbOb({ base: 'say', pastForm: 'said' }),
	see: new _Verb.VerbOb({ base: 'see', pastForm: 'saw' }),
	shake: new _Verb.VerbOb({ base: 'shake', pastForm: 'shook' }),
	shut: new _Verb.VerbOb({ base: 'shut', pastForm: 'shut' }),
	shine: new _Verb.VerbOb({ base: 'shine', pastForm: 'shined' }),
	show: new _Verb.VerbOb({ base: 'show', pastForm: 'showed' }),
	sigh: new _Verb.VerbOb({ base: 'sigh', pastForm: 'sighed' }),
	sink: new _Verb.VerbOb({ base: 'sink', pastForm: 'sank' }),
	sit: new _Verb.VerbOb({ base: 'sit', pastForm: 'sat' }),
	stand: new _Verb.VerbOb({ base: 'stand', pastForm: 'stood' }),
	steal: new _Verb.VerbOb({ base: 'steal', pastForm: 'stole' }),
	step: new _Verb.VerbOb({ base: 'step', pastForm: 'stepped' }),
	stop: new _Verb.VerbOb({ base: 'stop', pastForm: 'stopped' }),
	take: new _Verb.VerbOb({ base: 'take', pastForm: 'took' }),
	tell: new _Verb.VerbOb({ base: 'tell', pastForm: 'told' }),
	thump: new _Verb.VerbOb({ base: 'thump', pastForm: 'thumped' }),
	turn: new _Verb.VerbOb({ base: 'turn', pastForm: 'turned' }),
	visit: new _Verb.VerbOb({ base: 'visit', pastForm: 'visited' }),
	walk: new _Verb.VerbOb({ base: 'walk', pastForm: 'walked' }),
	want: new _Verb.VerbOb({ base: 'want', pastForm: 'wanted' }),
	wash: new _Verb.VerbOb({ base: 'wash', pastForm: 'washed' }),
	wish: new _Verb.VerbOb({ base: 'wish', pastForm: 'wished' }),
	work: new _Verb.VerbOb({ base: 'work', pastForm: 'worked' })
};

exports.default = VDictOb;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,